export const TipsData = [
  {
    angular: [
      "Use Angular CLI to create and manage your Angular projects.",
      "Follow the Single Responsibility Principle for focused and maintainable components.",
      "Utilize Angular's decorators like @Component, @Directive, and @Pipe for reusable elements.",
      "Leverage Angular's template syntax and directives like *ngFor and *ngIf for efficient rendering.",
      "Take advantage of Angular's data binding for creating dynamic and interactive components.",
      "Implement Angular's Reactive Forms for handling form inputs and validations.",
      "Utilize Angular's Dependency Injection (DI) system for managing dependencies.",
      "Leverage Angular's HttpClient module for making HTTP requests and handling APIs.",
      "Use Angular's router module for implementing routing and navigation.",
      "Optimize loading time by implementing lazy loading for modules.",
      "Utilize Angular's @Input and @Output decorators for creating reusable and flexible components.",
      "Make use of Angular's built-in pipes for data manipulation and formatting.",
      "Implement Angular's Interceptors for intercepting and modifying HTTP requests and responses.",
      "Use Angular's NgZone to handle asynchronous operations and optimize change detection.",
      "Utilize Angular's ChangeDetectionStrategy to fine-tune change detection and improve performance.",
      "Group multiple elements without extra DOM nodes using Angular's ng-container directive.",
      "Access child components and elements using Angular's ViewChild and ContentChild decorators.",
      "Optimize performance with Angular's OnPush change detection strategy and Immutable data structures.",
      "Create reusable templates and dynamic rendering with Angular's ng-template and ng-container.",
      "Stay updated with Angular's latest releases, best practices, and community-driven resources.",
      "Use Angular CLI to create and manage your Angular projects.",
      "Follow the Single Responsibility Principle for focused and maintainable components.",
      "Utilize Angular's decorators like @Component, @Directive, and @Pipe for reusable elements.",
      "Leverage Angular's template syntax and directives like *ngFor and *ngIf for efficient rendering.",
      "Take advantage of Angular's data binding for creating dynamic and interactive components.",
      "Implement Angular's Reactive Forms for handling form inputs and validations.",
      "Utilize Angular's Dependency Injection (DI) system for managing dependencies.",
      "Leverage Angular's HttpClient module for making HTTP requests and handling APIs.",
      "Use Angular's router module for implementing routing and navigation.",
      "Optimize loading time by implementing lazy loading for modules.",
      "Utilize Angular's @Input and @Output decorators for creating reusable and flexible components.",
      "Make use of Angular's built-in pipes for data manipulation and formatting.",
      "Implement Angular's Interceptors for intercepting and modifying HTTP requests and responses.",
      "Use Angular's NgZone to handle asynchronous operations and optimize change detection.",
      "Utilize Angular's ChangeDetectionStrategy to fine-tune change detection and improve performance.",
      "Group multiple elements without extra DOM nodes using Angular's ng-container directive.",
      "Access child components and elements using Angular's ViewChild and ContentChild decorators.",
      "Optimize performance with Angular's OnPush change detection strategy and Immutable data structures.",
      "Create reusable templates and dynamic rendering with Angular's ng-template and ng-container.",
      "Stay updated with Angular's latest releases, best practices, and community-driven resources."
    ],
    react: [
      "Use functional components and hooks for better code organization.",
      "Follow the Single Responsibility Principle to keep your components focused.",
      "Utilize React's JSX syntax for writing expressive and readable UI code.",
      "Use React's virtual DOM for efficient rendering and performance optimization.",
      "Leverage React's component lifecycle methods for managing component state and side effects.",
      "Make use of React's Context API for efficient state management across components.",
      "Implement React Router for handling client-side routing in your application.",
      "Utilize React's prop types or TypeScript for type checking and validation.",
      "Use React DevTools for debugging and inspecting your React components.",
      "Optimize rendering performance with React's memoization and shouldComponentUpdate.",
      "Leverage React's error boundaries for graceful error handling in your application.",
      "Make use of React's event handling system for interactive UI behavior.",
      "Use React's state management libraries like Redux or MobX for complex state management.",
      "Utilize React's Higher-Order Components (HOCs) or Render Props pattern for code reuse.",
      "Make use of React's useEffect hook for handling side effects and fetching data.",
      "Optimize performance by splitting your React application into smaller, lazy-loaded chunks.",
      "Follow React's naming conventions and best practices for better code readability and maintainability.",
      "Utilize React's CSS-in-JS libraries like styled-components or Emotion for styling your components.",
      "Stay updated with React's latest releases and community-driven resources for new features and best practices.",
      "Write unit tests and utilize testing libraries like React Testing Library or Enzyme for testing your React components."
    ],
    typescript: [
      "Enable strict mode in TypeScript compiler options for enhanced type checking.",
      "Utilize TypeScript's static typing for improved code robustness and error detection.",
      "Take advantage of TypeScript's interfaces and types for defining clear and reusable data structures.",
      "Use TypeScript's type inference to minimize the need for explicit type annotations.",
      "Leverage TypeScript's enums for defining a set of named constant values.",
      "Utilize TypeScript's union and intersection types for creating flexible and expressive types.",
      "Make use of TypeScript's type guards for handling conditional logic based on types.",
      "Use TypeScript's keyof operator to get a union of all property names of an object type.",
      "Take advantage of TypeScript's type assertions (type casting) for more flexible type handling.",
      "Use TypeScript's keyof and mapped types to create powerful object shape transformations.",
      "Leverage TypeScript's decorators for metadata and to enhance the behavior of your classes and functions.",
      "Utilize TypeScript's utility types (Partial, Readonly, Pick, etc.) for common type transformations.",
      "Make use of TypeScript's generics to create reusable and type-safe components and functions.",
      "Use TypeScript's namespace or module syntax for organizing your code into logical units.",
      "Leverage TypeScript's async/await syntax for handling asynchronous operations in a more readable manner.",
      "Utilize TypeScript's type declaration files (.d.ts) for adding type information to JavaScript libraries.",
      "Take advantage of TypeScript's strictNullChecks to avoid null and undefined runtime errors.",
      "Use TypeScript's strict mode compiler option to enforce stricter type checking rules.",
      "Leverage TypeScript's conditional types for creating complex type transformations and conditional logic.",
      "Stay updated with TypeScript's latest releases and community-driven resources for new features and best practices."
    ],
    rxjs: [
      "Understand the core concepts of Observables, Observers, and Subscriptions in RxJS.",
      "Import and use RxJS operators to transform, filter, and combine data streams.",
      "Avoid subscribing to an Observable inside the component's template.",
      "Use operators like `tap` for side effects without modifying the stream.",
      "Unsubscribe from Observables to prevent memory leaks.",
      "Use Subjects to create and multicast data streams.",
      "Leverage higher-order Observables (e.g., switchMap, mergeMap) for complex stream transformations.",
      "Combine multiple Observables using operators like `combineLatest` and `zip`.",
      "Handle errors in RxJS using operators like `catchError` and `retry`.",
      "Use the `async` pipe in Angular templates to subscribe and unsubscribe automatically.",
      "Debounce user input using operators like `debounceTime` for efficient event handling.",
      "Use the `share` or `shareReplay` operator to share the same subscription across multiple subscribers.",
      "Apply backpressure control using operators like `throttleTime` and `sample`.",
      "Use the `finalize` operator to perform cleanup logic after the Observable completes or errors.",
      "Avoid using `Subject` as a global event bus; consider using dedicated state management libraries.",
      "Create custom operators to encapsulate reusable stream manipulation logic.",
      "Consider using the `asyncScheduler` or `animationFrameScheduler` for scheduling tasks in time-based operations.",
      "Learn about hot and cold Observables and understand their implications.",
      "Check official RxJS documentation and resources for learning and reference.",
      "Experiment with marble diagrams and visualizations to understand the behavior of operators.",
      "Practice and experiment with RxJS to gain familiarity and improve your reactive programming skills."
    ],
    css: [
      "Use a CSS preprocessor like Sass or Less to enhance your CSS workflow.",
      "Leverage CSS variables (custom properties) for reusable and dynamic styling.",
      "Apply CSS media queries for responsive design and adapting to different screen sizes.",
      "Utilize CSS flexbox for creating flexible and responsive layouts.",
      "Use CSS grid for advanced two-dimensional layouts with grid-based positioning.",
      "Apply CSS transitions and animations for smooth and engaging visual effects.",
      "Use CSS pseudo-classes (e.g., :hover, :focus) and pseudo-elements (e.g., ::before, ::after) for styling specific states and elements.",
      "Optimize CSS performance by minifying and combining stylesheets.",
      "Apply CSS vendor prefixes for ensuring cross-browser compatibility.",
      "Leverage CSS methodologies like BEM (Block, Element, Modifier) or SMACSS for better code organization and maintainability.",
      "Use CSS frameworks like Bootstrap or Tailwind CSS for rapid development and consistent styling.",
      "Avoid using inline styles and prioritize external CSS files for better separation of concerns.",
      "Consider using CSS-in-JS solutions like styled-components or Emotion for component-based styling.",
      "Apply CSS clearfix techniques to prevent collapsed parent containers with floating children.",
      "Utilize CSS gradients and background images for visually appealing backgrounds.",
      "Use CSS transform and transition properties for hardware-accelerated animations.",
      "Apply CSS box-sizing: border-box to include padding and border within the element's width and height calculations.",
      "Use CSS selector specificity and cascade rules to control styles more precisely.",
      "Optimize CSS performance by reducing unnecessary style declarations and selectors.",
      "Stay updated with CSS features, new specifications, and best practices.",
      "Experiment, practice, and explore different CSS techniques and layouts to expand your skillset."
    ],
    javascript: [
      "Use proper variable naming conventions for clarity and maintainability.",
      "Apply consistent indentation and formatting to improve code readability.",
      "Avoid global variables and prefer encapsulation using function scope or modules.",
      "Use strict mode ('use strict') to enforce cleaner JavaScript code.",
      "Understand the differences between `==` and `===` for equality comparisons.",
      "Leverage template literals (backticks) for more expressive and readable string interpolation.",
      "Utilize arrow functions for concise and lexical scoping of `this`.",
      "Use the spread syntax (...) to clone arrays, merge objects, or pass arguments.",
      "Apply destructuring assignment to extract values from objects or arrays.",
      "Take advantage of JavaScript's array methods (e.g., map, filter, reduce) for efficient data manipulation.",
      "Avoid excessive nesting and callback hell by using Promises or async/await for asynchronous operations.",
      "Use the `let` and `const` keywords for block scoping and avoiding variable hoisting.",
      "Practice defensive coding and handle potential errors using try...catch blocks.",
      "Apply object-oriented programming principles when appropriate for code organization and modularity.",
      "Leverage the power of closures for creating private variables and encapsulated behavior.",
      "Use the module pattern or modern JavaScript modules (ES modules) for modular code architecture.",
      "Take advantage of JavaScript's built-in methods and libraries for common tasks (e.g., Array, Math, Date).",
      "Optimize performance by minimizing DOM manipulation and batch DOM updates when possible.",
      "Utilize the debugger statement or browser developer tools for debugging JavaScript code.",
      "Stay updated with JavaScript language features, ECMAScript specifications, and best practices.",
      "Practice, experiment, and explore different JavaScript techniques and libraries to enhance your skills."
    ]
  }
];
